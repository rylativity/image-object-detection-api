package org.ryanstewart.objectdetection.model.dto;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@ApiModel(description = "Class representing object detection results")
public class DetectionResponseDTO {

	@ApiModelProperty(notes = "Detection Boxes Generated By Model")
	private List<List<Float>> detectionBoxes;

	@ApiModelProperty(notes = "Detection Certainty Scores Generated by Model for each class and bounding box")
	private List<Float> detectionScores;

	@ApiModelProperty(notes = "Detection Classes Identified in each bounding box as a (int) float value, certainty of class prediction tracked in detectionScores")
	private List<Integer> detectionClasses;

	@ApiModelProperty(notes = "The named class of each detection")
	private List<String> detectionClassNames;

	@ApiModelProperty(notes = "Total number of detections made in the image")
	private int numDetections;

	@ApiModelProperty(notes = "Object holding lists of classification values for prespecified threshold certainty values")
	ClassesAtThresholdDTO classesAtThresholds;

	@Builder
	public DetectionResponseDTO(Map<String, Object> detectionResults) {

		this.detectionBoxes = (List<List<Float>>) detectionResults.get("detection_boxes");

		this.detectionScores = (List<Float>) detectionResults.get("detection_scores");

		//DetectionResponseDTO requires List<Int> for this specific attribute
		List<Float> detectionClassesFloats = (List<Float>) detectionResults.get("detection_classes");
		List<Integer> detectionClassesInts = new ArrayList<>();
		for(Float f: detectionClassesFloats){
			detectionClassesInts.add((int) f.floatValue());
		}
		this.detectionClasses = detectionClassesInts;

		this.detectionClassNames = (List<String>) detectionResults.get("detection_class_names");

		Float numDetectionsFloat = (Float) detectionResults.get("num_detections");
		this.numDetections = (int) numDetectionsFloat.floatValue();
	}

	public Map<String, Object> toMap(){
		Map<String, Object> map = new HashMap<>();
		map.put("DetectionBoxes", detectionBoxes);
		map.put("DetectionScores", detectionScores);
		map.put("DetectionClass", detectionClasses);
		map.put("DetectionClassNames", detectionClassNames);
		map.put("NumberOfDetections", numDetections);
		map.put("ClassesAtThresholds", classesAtThresholds.toMap());
		return map;
	}

	public String toJson() throws JsonProcessingException
	{
		ObjectMapper objectMapper = new ObjectMapper();
		return objectMapper.writeValueAsString(this.toMap());

	}
}
